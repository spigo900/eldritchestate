* Complete a prototype of the eldritch real estate game. [4/7]
  Remember: don't write anything extra, and no more content than is absolutely
  necessary. We're trying to actually finish this thing.
** DONE Code the map representation.
   CLOSED: [2015-08-07 Fri 18:07]
   It's not ideal, but I think it's essentially as I need it for a prototype.
   I'll have to rethink it and rewrite it at some later point if I go on to
   realize the game proper, though.
** TODO Write the pseudorandom content generation system
   It only needs to work for maps right now, but I may later want to extend it to
   clients, items, monsters, plots, or whatever. But it really only needs to work
   for maps at the moment, so that's what I'll code it for.
** DONE Write the lighting system.
   CLOSED: [2015-08-20 Thu 23:28]
   I'm not really sure how to start with this.

   ... It's done now. Finished earlier today. I haven't got it completely
   working yet, but it works well enough for now, so I'm calling it.

   ... 1:12. Same day. I got it completely working by fixing the Bresenham line
   algorithm I sort-of-wrote, sort-of-stole-from-Wikipedia and was using. Walls
   are lit properly now.

   Yay.
** DONE Write the Line of Sight system.
   CLOSED: [2015-08-21 Fri 14:35]
   Really, this means "integrate libtcod/UnTDL's line of sight system." Same
   difference, until and unless I learn how to implement one myself -- and I
   might, but I'll probably still use the library version even so. It's written
   in C by someone other than me, so it's likely to be faster.
** TODO Code the Fog of Fh'tagn system.
   ORIGINALLY CLOSED [2015-08-21 Fri 14:35]
   It's not perfect, but it works, I think. I haven't been able to get the fog
   to work quite as I wanted it to yet, though. I'll have to take a look at
   Brogue's code and see if I can figure out how it manages to make lava, water,
   the title screen, etc. waver/shimmer like it does. I suppose it's not via
   Perlin noise, or at least not using it the way I'm currently using it.
*** TODO Write a gradient cellular automaton.
    This is how I plan to get the fog roiling properly. I couldn't figure out
    Brogue's code, but I did (eventually) figure out what would be useful: a
    non-binary (gradient) cellular automaton. Take the Perlin noise map as a
    seed --- possibly with its points filtered or scaled first --- and then run
    the automata each frame to get the new fog-map.

    Problem: I'm not quite sure how to do this in a performant manner. May have
    to refer back to some of my earlier cell automata experiments. I'm thinking
    I'll just have to mutate in place, but swap universes each tick. Have a
    src_fogmap and a dest_fogmap, pass them into the automata function, and swap
    them.

    UPDATE WITH SOMETHING SORT OF LIKE A POSSIBLE FOG GENERATION PROCEDURE...
     - At the beginning (of the game? on load? probably on load or on entering a
       map i.e. after mapgen or map load), generate 3 to 5 fog generators at
       random cells.
     - Every tick, generate some fixed (?) amount of fog in the generators' cells
       and randomly generate at some fixed chance (based on distance or something
       else?) a different fixed amount of fog in each surrounding cell. (surrounding
       meaning the 8-cell Moore neighborhood.)
     - Every tick, fog cells with less than some amount of fog (half the cell
       maximum?) lose some amount of fog.
     - Every tick, fog cells with at least that amount of fog have a random chance
       to transfer some (also random?) amount of fog to another cell in its Moore
       neighborhood.

    There's another complication I may have to deal with, which is...
*** TODO Separate render loop from turn loop
    Not sure if this is something I did already or not; if it is, yay. If not,
    it's gotta happen if fog is going to; the fog can't work properly without
    it. Gonna have to make sure the fog map persists between things, and I
    should probably keep it as a separate map from the actual map, since they're
    not really related. The map map contains actual gameplay-relevant
    information; this fog map just says how bright to make the fog squares /if/
    they occur somewhere. That's it.

    I may have to involve the LoS map to make it look nice around the edge of
    sight. I'm not sure. I'll probably also want to figure out a different cell
    automata to get my candles and such to flicker nicely; stable lighting just
    doesn't suit a game of this nature.
** TODO Code up some very basic NPCs.
   These two could probably share some basic code with each other and/or the
   player's internal representation.  I should try and make sure they do somehow.
*** DONE Write player/general NPC/actor code.
    CLOSED: [2015-08-07 Fri 18:06]
    Actually, I did this earlier, technically, but I forgot to tick it off. Oh,
    well.
*** DONE Code the real estate clients.
    CLOSED: [2015-08-07 Fri 18:06]
    They work, and with a minimum of bugs fixed. Success!
*** TODO Program the monsters' existence/behavior.
** TODO Write the UI code.
